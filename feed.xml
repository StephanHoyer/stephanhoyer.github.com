<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephan Hoyer</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>fun driven software development</description>
    <pubDate>Thu, 15 Nov 2012 08:11:00 +0100</pubDate>
    <generator>The mighty Wintersmith</generator>
    <language>en</language>
    <item>
      <title>Developer Blog using wintersmith and github pages</title>
      <link>http://localhost:8080/articles/001-building-wintersmith-blog/</link>
      <pubDate>Thu, 15 Nov 2012 08:11:00 +0100</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/001-building-wintersmith-blog/</guid>
      <author></author>
      <description>&lt;p&gt;For a long time, I want to be able to share some thoughts about life in a
blog every now and than. I made serveral attempts to do so. I tried
&lt;a href=&quot;http://tumblr.com&quot;&gt;tumblr&lt;/a&gt; but it wasn&apos;t as flexible as I need it. I tried 
&lt;a href=&quot;http://octopress.org&quot;&gt;octopress&lt;/a&gt;, but i&apos;m not as
familiar with ruby as I probably should be. Never tried wordpress, since it
is to much overhead and written in bad ol&apos; php, which I want to avoid for
reasons. Also I want to write my posts using a simple markup language like
&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;markdown&lt;/a&gt; or 
&lt;a href=&quot;http://google.com&quot;&gt;restuctured text&lt;/a&gt;, 
first for versioning in git, second for using my beloved vim for editing. 

&lt;/p&gt;
&lt;p&gt;Since I use node.js a while now, i searched for
ports of octopress in node and found
&lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;wintersmith&lt;/a&gt;, what i&apos;m using now.

&lt;/p&gt;
&lt;p&gt;It has great flexibility, is super simple to use and to extend. It works good
on &lt;a href=&quot;http://pages.github.com/&quot;&gt;github pages&lt;/a&gt;, what i use as hosting.

&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;So here is how to setup. First you have to install
&lt;a href=&quot;http://nodejs.org&quot;&gt;&lt;strong&gt;node.js&lt;/strong&gt;&lt;/a&gt; as showed on the node.js
&lt;a href=&quot;http://nodejs.org&quot;&gt;homepage&lt;/a&gt;. Because of the awesomenes of 
&lt;a href=&quot;http://npmjs.org&quot;&gt;&lt;strong&gt;npm&lt;/strong&gt;&lt;/a&gt;, installing wintersmith is easy:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install wintersmith -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That gives you - besides the library - a binary where you can run serveral
tasks. First one is to create your blog:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wintersmith &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; path/to/my-shiny-&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;-blog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates a file stucture and some basic posts for you:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;├── config.json                site configuration &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; metadata
├── contents
│   ├── archive.md
│   ├── articles               each article is a subfolder of articles
│   │   ├── another-test
│   │   │   └── index.md
│   │   ├── bamboo-cutter
│   │   │   ├── Taketori_Monogatari.jpg
│   │   │   └── index.md
│   │   ├── hello-world
│   │   │   └── index.md
│   │   └── red-herring
│   │       ├── banana.jpg
│   │       └── index.md
│   ├── authors                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; an author is set in an articles metadata it
│   │   ├── baker.json         will be read from here
│   │   └── the-wintersmith.json
│   ├── css
│   │   ├── github.css
│   │   └── main.css
│   ├── feed.json              json page that renders the rss feed to feed.xml
│   ├── index.json
└── templates
    ├── archive.jade
    ├── article.jade
    ├── author.jade
    ├── feed.jade
    ├── index.jade
    └── layout.jade&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that it really takes a few files to drive a wintersmith blog. Most
of them are templates and the blog posts itself. Besides that there are config
and CSS files.

&lt;/p&gt;
&lt;p&gt;Since &lt;em&gt;github&lt;/em&gt; serves the page from the base dir of the repo, we have to move
the blog to a new directory I called &lt;code&gt;src&lt;/code&gt;

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir src
$ mv config.json contents templates src&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to see the blog in action, right? Cd to the &lt;code&gt;src&lt;/code&gt; directory and type

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wintersmith preview&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and head to &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; in the browser. If all went right, you should see a
blog with two example entries.

&lt;/p&gt;
&lt;p&gt;You want to test deployment to github, so you have to build the static
html-files for your blog. In order to do so you have to change the build 
directory to be the root dir of the repository. Therefor go to &lt;code&gt;config.json&lt;/code&gt;
in the &lt;code&gt;src&lt;/code&gt; folder and add the following line above the &lt;code&gt;locals&lt;/code&gt;-section:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &quot;output&quot;: &quot;../&quot;,&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It tells wintersmith to create the files in your blog root directory which 
will be our git root. Then you can start the build process:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wintersmith build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you didn&apos;t already have, create a git repository in the
blog directory. Your directory structure should look like this now:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;├── .git
├── archive.html
├── css
├── index.html
├── articles
├── feed.xml
└── src&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then commit all your changes and push them to your shiny new
created github repository called &lt;code&gt;your-github-name.github.com&lt;/code&gt;.

&lt;/p&gt;
&lt;p&gt;After that &lt;em&gt;github&lt;/em&gt; will send you a notification mail, if your website has
been deployed. Then you can visit the new blog under
&lt;a href=&quot;http://your-github-name.github.com&quot;&gt;http://your-github-name.github.com&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;Now you can write your first blogpost. Simply create a new directory under
&lt;code&gt;src/articles&lt;/code&gt; or use one of the example posts and change it appropriatly.

&lt;/p&gt;
&lt;h2&gt;Tweaks&lt;/h2&gt;
&lt;h3&gt;Base URL&lt;/h3&gt;
&lt;p&gt;As webdeveloper you know the problems that occur when using relativ links in
images, css and js files and of cause links. Thats why you always want to use
absolute urls. Wintersmith provides an environment variable called
&lt;code&gt;locals.url&lt;/code&gt; which you can use in templates. The problem is, that it has to be
different in preview mode (&lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;) and build mode
(&lt;a href=&quot;http://your-github-name.github.com&quot;&gt;http://your-github-name.github.com&lt;/a&gt;). I solved this using two different config
files, the existing on for preview, and a tweaked one for build. When calling
to build the site, you can specify a custom config file to use:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wintersmith build -c config.build.json&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Using Stylus&lt;/h3&gt;
&lt;p&gt;Since there are CSS preprocessors out there, you didn&apos;t want to work with
plain CSS anymore, right? That&apos;s a problem already solved by
&lt;code&gt;wintersmith-perian&lt;/code&gt; plugin. Simply install it via npm

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install wintersmith-perian -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that you only need to tell wintersmith, that there is a new plugin to
load by altering the config file and adding

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &quot;plugins&quot;: [
    &quot;wintersmith-perian&quot;
  ],&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;above the &lt;code&gt;locals&lt;/code&gt;-object. From now on, all files named &lt;code&gt;*.styl&lt;/code&gt; will be compiled
to CSS live in preview mode and also during build step.

&lt;/p&gt;
&lt;p&gt;Hope this helps setting up the next awesome developer blog.
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Testing JavaScript with test'em</title>
      <link>http://localhost:8080/articles/002-testing-js-with-testem/</link>
      <pubDate>Thu, 22 Nov 2012 11:11:00 +0100</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/002-testing-js-with-testem/</guid>
      <author></author>
      <description>&lt;p&gt;Frontend JavaScript testing has always been painfull, that&apos;s why most people
avoid it, although there writing tests for their backend code.

&lt;/p&gt;
&lt;p&gt;There are some pretty nice js-testing tools out there today but in most of
them, you need to reload the browser every time you change code or tests. If
you want to test on multiple browsers this can be awkward.

&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/airportyh/testem&quot;&gt;&lt;strong&gt;Test&apos;em&lt;/strong&gt;&lt;/a&gt; tries to solve this flaw. 
It&apos;s pretty much a meta testrunner. It enables you to run browser tests 
automatically from the commandline.

&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;So here is how to setup. First you have to install
&lt;a href=&quot;http://nodejs.org&quot;&gt;&lt;strong&gt;node.js&lt;/strong&gt;&lt;/a&gt; as showed on the node.js
&lt;a href=&quot;http://nodejs.org&quot;&gt;homepage&lt;/a&gt;. Then install Test&apos;em via 
&lt;a href=&quot;http://npmjs.org&quot;&gt;&lt;strong&gt;npm&lt;/strong&gt;&lt;/a&gt;:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install testem -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should be able to run the test&apos;em command:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ testem&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you see something like the following, all is setup right:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TEST&lt;span class=&quot;string&quot;&gt;'EM '&lt;/span&gt;SCRIPTS!                                                                                    
Open the URL below in a browser to connect.                                                          
http:&lt;span class=&quot;comment&quot;&gt;//localhost:7357&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;For our first test we create a new directory called &lt;code&gt;testem&lt;/code&gt;:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir testem
$ cd testem&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can start testem and attach a browser to
&lt;a href=&quot;http://localhost:7357&quot;&gt;localost:7357&lt;/a&gt;. You can now hide this window, because
all feedback of the testrunner is also given in the test&apos;em command line
interface. If you open it up, you can see a tab for each browser you attached
to test&apos;em.

&lt;/p&gt;
&lt;p&gt;Try to add at least one other browser to test&apos;em.

&lt;/p&gt;
&lt;p&gt;Now it&apos;s time to write our first test. Create a file name &lt;code&gt;test_hello.js&lt;/code&gt; in
the project root. Add the following code to the file:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// test_hello.js&lt;/span&gt;
describe(&lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(){
  it(&lt;span class=&quot;string&quot;&gt;'should say hello'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(){
    expect(hello).toBeDefined();
  });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you save file, test&apos;em will automatically reload the browser and run the
test. Since there is no &lt;code&gt;hello&lt;/code&gt; variable defined, the tests fails as expected.

&lt;/p&gt;
&lt;p&gt;So lets create a new file with the implemantation. Therefore create a file
named &lt;code&gt;hello.js&lt;/code&gt; in the root of our project that contains:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// hello.js&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; hello() {
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The test should be green. So let&apos;s complete this simple method be adding
another expectation:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// test_hello.js&lt;/span&gt;
describe(&lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(){
  it(&lt;span class=&quot;string&quot;&gt;'should say hello'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(){
    expect(hello).toBeDefined();
    expect(hello()).toEqual(&lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;);
  });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In save, the tests should again fail. So change the implementation according
to the expectation:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// hello.js&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; hello() {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&apos;s it, tests are green again.

&lt;/p&gt;
&lt;h2&gt;Extended usage&lt;/h2&gt;
&lt;h3&gt;Other testing framework&lt;/h3&gt;
&lt;p&gt;Frist thing we want to change is the testrunner. Since I use
&lt;a href=&quot;http://visionmedia.github.com/mocha/&quot;&gt;&lt;strong&gt;mocha&lt;/strong&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/LearnBoost/expect.js&quot;&gt;&lt;strong&gt;expect.js&lt;/strong&gt;&lt;/a&gt; on server side I 
want to be able to also use it in browser tests.

&lt;/p&gt;
&lt;p&gt;Therefore we have to create a test&apos;em configuration file called &lt;code&gt;testem.json&lt;/code&gt;:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// testem.json&lt;/span&gt;
{
    &lt;span class=&quot;string&quot;&gt;&quot;framework&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;mocha&quot;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You have to restart the server so the new configuration is loaded. The tests
are failing now expect.js is not build in to mocha and have to be included
seperatly. Download expect.js to the projects root

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget https:&lt;span class=&quot;comment&quot;&gt;//raw.github.com/LearnBoost/expect.js/master/expect.js&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expect.js&apos;s syntax is a little bit different from jasmin&apos;s so we have to
change this:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// test_hello.js&lt;/span&gt;
describe(&lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(){
  it(&lt;span class=&quot;string&quot;&gt;'should say hello'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(){
    expect(hello).to.a(&lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt;);
    expect(hello()).to.be(&lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;);
  });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, test green again!

&lt;/p&gt;
&lt;h3&gt;Start browsers automaticaly&lt;/h3&gt;
&lt;p&gt;It&apos;s odd to manually connect test&apos;em to each browser, right? So test&apos;em is
able to do this automatically for you be either giving a command line option
or, like we do now, changing the config:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// testem.json&lt;/span&gt;
{
    &lt;span class=&quot;string&quot;&gt;&quot;launch_in_dev&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;Chrome&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Firefox&quot;&lt;/span&gt;],
    &lt;span class=&quot;string&quot;&gt;&quot;framework&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;mocha&quot;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you restart test&apos;em server now, chrome and firefox should be started
automatically.

&lt;/p&gt;
&lt;h3&gt;Collect files&lt;/h3&gt;
&lt;p&gt;Normally js-files are not in the project root, so we have to change this be
also altering the config file:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// testem.json&lt;/span&gt;
{
    &lt;span class=&quot;string&quot;&gt;&quot;launch_in_dev&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;Chrome&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Firefox&quot;&lt;/span&gt;],
    &lt;span class=&quot;string&quot;&gt;&quot;framework&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;mocha&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;src_files&quot;&lt;/span&gt;: [
        &lt;span class=&quot;string&quot;&gt;&quot;js/**/*.js&quot;&lt;/span&gt;
    ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now we can move all the files to a new directory called &lt;code&gt;js&lt;/code&gt; to clean up
our project root.

&lt;/p&gt;
&lt;h3&gt;Using phantom js&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; is a Webkit-based headless browser. 
It&apos;s really fast, since it does not have any UI. So it&apos;s great as a first 
test target during development.

&lt;/p&gt;
&lt;p&gt;Test&apos;em will automatically use it if you have PhantomJS installed. To do so
simply install it via npm:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install phantomjs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then do a

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ testem launchers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and verify that it&apos;s in the list.

&lt;/p&gt;
&lt;h3&gt;Console.log&lt;/h3&gt;
&lt;p&gt;Try to make a &lt;code&gt;console.log()&lt;/code&gt; in any js file.

&lt;/p&gt;
&lt;h3&gt;Preprocessors&lt;/h3&gt;
&lt;p&gt;It is also possible to let test&apos;em compile your
&lt;a href=&quot;http://coffeescript.org/&quot;&gt;coffee&lt;/a&gt;/&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;type-script&lt;/a&gt; 
files before sending them to the browser. You only need to specify this in the
config file:

&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// testem.json&lt;/span&gt;
{
    &lt;span class=&quot;string&quot;&gt;&quot;framework&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;mocha&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;src_files&quot;&lt;/span&gt;: [
        &lt;span class=&quot;string&quot;&gt;&quot;js/**/*.coffee&quot;&lt;/span&gt;
    ],
    &lt;span class=&quot;string&quot;&gt;&quot;before_tests&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;coffee -c *.coffee&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;serve_files&quot;&lt;/span&gt;: [
        &lt;span class=&quot;string&quot;&gt;&quot;js/**/*.js&quot;&lt;/span&gt;
    ],
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&apos;s it. Hope you are now testing all of your javascript code.
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Adding tags functionality to wintersmith blog</title>
      <link>http://localhost:8080/articles/003-add-tags-to-wintersmith-blog/</link>
      <pubDate>Tue, 15 Nov 2011 15:33:00 +0100</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/003-add-tags-to-wintersmith-blog/</guid>
      <author></author>
      <description>&lt;p&gt;TODO!
&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>